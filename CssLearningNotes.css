/* 1. SELECTORS: */
#someId
{
    background-color: rgb(117, 44, 44);
}

.someClass
{
    background-color: rgb(44, 118, 57);
}   

.anotherClass
{
    color: rgb(44, 118, 45);
}

div
{
    color: rgb(48, 44, 118);
}

/* wildcard selector/ universal selector: */
* {
    color: rgb(118, 44, 44);
}

/* property selector: */
[id] {
    color: rgb(44, 118, 118);
}
/* or */
[id="someId"] {
    color: rgb(44, 118, 118);
}
/* or select class as a property */
[class = "someClass"] {
    color: rgb(44, 118, 118);
}

/* nested selector */
div strong em {
    background-color: rgb(118, 118, 44);
}   /*em under strong within div*/
.warpper .box em {
    background-color: rgb(118, 118, 44);
}   /*em under box within warpper*/

/* direct child selector */
div > em {
    background-color: rgb(118, 118, 44);
}   /*will select em under div rather than em under strong within div*/

/* grouping selector/ grouped selector */
div.demo {
    background-color: rgb(118, 118, 44);
}
/* use example */
div.warpper > [class = "box"] > div#only.box {
    background-color: rgb(118, 118, 44);
}

/* Group Selector */
.demo1, .demo2, .demo3 {
    background-color: rgb(118, 118, 44);
}


/* 2. selecting weight */
/* div: 1, .box: 10, # only: 100
    if there are multiple selectors with the same weight, the last one will be applied
    
    if there are multiple selectors applied and selected, the weight will be added up:
    div .classP #idP{
        background-color: rgb(118, 118, 44);
    }
    weight: 1 + 10 + 100 = 111

    !important will override the weight to infinity */


/* 3. Properties: */
span {
    font-size: 12;  /* set the height of the font */
    font-weight: bold;  /* make the text strong */
    font-style: italic; /* make the text italic */
    font-family: arial; /* set the calligraphic style */

    /* set color 1 */
    color: #ff4400; /* start with #
              R G B
    first 2 letters represent for red, 0 means the minimum saturation, ff means maximum
    second 2 letters represent for green
    last 2 letters represent for blue 
    if 2 letters for one color are same, they can be omitted:*/
    color: #f40;
    /* set color 2 */
    color: rgb(255, 44, 0); /* set number range from 0 to 255 */

    border:1px solid #000; /* set border with 1px width, style and color */
    /* border style: soild, dashed, dotted */
    border-left: 2px solid #f00; /* set border for left side */
    border-top-color: #0f0; /* set border color for top side */
    border-bottom-left-radius: 10px; /* set border radius for bottom left corner */
    border-right-color: transparent;

    text-align: center; /* set text alignment on width */
    line-height: height; /* to set the line of text in center of the container */

    text-indent: 2em; /* set the indentation of the first line of text */
    /* 1em = 1 * font-size = 12px here */

    text-decoration: line-through; /* set the text decoration */

    cursor: pointer;    /* set the cursor style */
}

a:hover{    /* hover only apply for bulk elements or link */
    background-color: rgb(118, 118, 44);
    color: #fff;
    font-size: 20px;
    font-weight: bold;
    font-family: arial;
    border-radius: 10px;
    text-indent: 2em;
}


/* 4. Inline & block elements */
/* Inline elements */
/* 
feature: the content decide the position of the element,
         can't change its width and height by css
including: span, strong, em, a, del
PS: all inline elements have text characteristics. 
(For example, multiple elements will be separate by space
    to solve this problem, use display: block;)
*/

/* Block elements */
/* 
feature: take a whole line, 
         can change its width and height by css
including: div, p, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, from address
*/

/* Inline-block elements */
/*
feature: the content decide the size of the element,
         can change its width and height by css
including: img, input, button, textarea, select
*/

/* Display property is controling the elements and it can be modified */
span{
    display: block; /* change the element from inline to block */
}
div{
    display: inline;
    width: 100px;
    height: 100px; /* can't change the width and height after changed it to inline element */
}


/* 5. Box Model */
/* 
    border: border-width border-style border-color;
    margin: margin-top margin-right margin-bottom margin-left;
    padding: padding-top padding-right padding-bottom padding-left;
    content: width, height;
*/
[class = "boxModel"]{
    width: 100px;
    height: 100px;
    background-color: aqua;
    border: 10px solid #000;
    padding: 10px 20px 30px 40px;   /* padding for: top right bottom left (clockwise) */
    /* if only wants to set a single direction of padding: "padding: 100px 0 0 0" */
    margin: 10px 20px 30px; /* 3 margin numbers for: top right&left bottom */
    display: block;
}
/* example: far view picture*/
div{
    display: block;
}
.content1{
    height: 10px;
    width: 10px;
    background-color: green;
}
.content{
    width: 10px;
    height: 10px;
    padding: 10px;
    background-color: greenyellow;
}
.box{
    width: 30px;
    height: 30px;
    padding: 10px;
    background-color: aqua;
}
.wrapper{
    width: 50px;
    height: 50px;
    padding: 10px;
    background-color: blue;
}

/* 6. absolute */
/*
    1). detach from the original position and layer
    2). able to set the position by top, right, bottom, left
    3). able to be covered by other elements

    left original position to relocate based on the first parent element with location property (absolute, relative), if doesn't find, it will be based on the body element.
*/
.someClass{
    position: absolute;
    top: 200px;
    left: 200px;
    /* or bottom + right */
}

/* 7. relative */
/*
    position relative to the original position and layer

    tips: use relative to set the position of the element, then use absolute to set the position of the child element.
*/

/* 8. body: the whole page itself */
body{
    margin: 0;
    padding: 0;
}

/* 9. fix */
/*
    keep the element in the same position on the screen, even when scrolling
*/
div {
    position: fixed;
    left: 50%;
    top: 50%;
    width: 200px;
    height: 200px;
    background-color: black;
    margin-left: -100px;
    margin-top: -100px;
}

/* 10. BFC (block format context) */
/* 
    1). a block-level box that is isolated from the rest of the page
    2). used to control the layout of the page
    3). used to prevent margin collapse
    4). used to prevent float elements from affecting the layout of the page
    5). used to prevent overflow elements from affecting the layout of the page

    how to trigger BFC (choose either one):
    overflow: hidden;
    position: absolute;
    display: inline-block;
    float: left/right;
*/

/* 11. Float */
/* 
    1). used to position elements to the left or right within their container
    2). used to create a layout where elements are positioned next to each other
    3). used to create a layout where elements are positioned in a grid-like structure
    4). used to create a layout where elements are positioned in a column-like structure
    how to use float:
    float: left; or right

    how to clear float:
    the next element after the float element will be positioned below the float element, so to clear the float, use:
    clear: both; or clear: left/right

    NOTE: float elementes create float context, which is a special context that allows elements to be positioned next to each other.
    block elements will not respond to float elements, but inline elements and BFC will.
    if it's an inline elements but need to clear float, use 
        display: block;
    to make the element a block element, so it will clear the float.
*/

/* 12. pseudo-element */
span::before {
    content: "Before: ";
    color: red;
}
span::after {
    content: " After";
    color: blue;
}
/* to clear float: */
span::after {
    content: "";
    display: block;
    clear: both;
}